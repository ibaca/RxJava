buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-rxjava-project-plugin:4.0.0'
        classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.1.0'
    }
}

description = 'RxJava: Reactive Extensions for the JVM â€“ a library for composing asynchronous and event-based programs using observable sequences for the Java VM.'

apply plugin: 'java'
//apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'nebula.rxjava-project'

repositories {
    mavenCentral()
}

sourceSets {
    gwt {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    gwtCompile.extendsFrom compile
    gwtRuntime.extendsFrom runtime
}

dependencies {
    signature 'org.codehaus.mojo.signature:java16:1.1@signature'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.google.guava:guava:19.0'
    testCompile 'com.pushtorefresh.java-private-constructor-checker:checker:1.2.0'

    perfCompile 'org.openjdk.jmh:jmh-core:1.11.3'
    perfCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.11.3'

    gwtCompile 'com.google.gwt:gwt-dev:2.8.1'
    gwtCompile 'com.google.gwt:gwt-user:2.8.1'
}

javadoc {
    exclude "**/rx/internal/**"
    exclude "**/test/**"
    exclude "**/perf/**"
    options {
        windowTitle = "RxJava Javadoc ${project.version}"
    }
    // Clear the following options to make the docs consistent with the old format
    options.addStringOption('top').value = ''
    options.addStringOption('doctitle').value = ''
    options.addStringOption('header').value = ''
    if (JavaVersion.current().isJava7()) {
        // "./gradle/stylesheet.css" only supports Java 7
        options.addStringOption('stylesheetfile', rootProject.file('./gradle/stylesheet.css').toString())
    }
}

// support for snapshot/final releases with the various branches RxJava uses
nebulaRelease {
    addReleaseBranchPattern(/\d+\.\d+\.\d+/)
    addReleaseBranchPattern('HEAD')
}

if (project.hasProperty('release.useLastTag')) {
    tasks.prepare.enabled = false
}

test{
     maxHeapSize = "1200m"
}

license {
    excludes(["**/*.md", "**/*.txt", "**/unsafe/*.java", "**/atomic/*.java", "**/Beta.java", "**/Experimental.java"])
}

jacoco {
    toolVersion = '0.7.7.201606060606' // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

build.dependsOn jacocoTestReport


//pmd {
//    toolVersion = '5.4.2'
//    ignoreFailures = true
//    sourceSets = [sourceSets.main]
//    ruleSets = []
//    ruleSetFiles = files('pmd.xml')
//}

//pmdMain {
//    reports {
//        html.enabled = true
//        xml.enabled = true
//    }
//}

//task pmdPrint(dependsOn: 'pmdMain') << {
//    File file = new File('build/reports/pmd/main.xml')
//    if (file.exists()) {
//
//        println("Listing first 100 PMD violations")
//
//        file.eachLine { line, count ->
//            if (count <= 100) {
//               println(line)
//            }
//        }
//
//    } else {
//        println("PMD file not found.")
//    }
//}

//build.dependsOn pmdPrint

animalsniffer {
    annotation = 'rx.internal.util.SuppressAnimalSniffer'
}

findbugs {
    ignoreFailures true
    toolVersion = '3.0.1'
    effort = 'max'
    reportLevel = 'low'
    sourceSets = [sourceSets.main]
}

findbugsMain {
    reports {
        html.enabled = false // Findbugs can only have on report enabled
        xml.enabled = true
    }
}

// rm -rf ../rxjava-gwt/src/main/replaced && ./gradlew clean gwtResources && mv build/replaced ../rxjava-gwt/src/main
task gwtResources(type: Copy) {
    from 'src/main/java';
    into 'build/replaced/rx/super'

    include '**/*.java'
    exclude '**/schedulers/**' // GWT has only one custom scheduler
    exclude '**/RxThreadFactory.java' // uses Thread
    exclude '**/OperatorObserveOn.java' // uses unsafe and references ImmediateScheduler and TrampolineScheduler
    exclude '**/OnSubscribeCombineLatest.java' // uses BitSet
    exclude '**/Blocking*.java' // GWT unsupported
    exclude { details -> details.file.isFile() && !(
                         details.file.text.contains('FieldUpdater.newUpdater') ||
                         details.file.text.contains('Collections.synchronized') ||
                         details.file.text.contains('ArrayDeque') ||
                         details.file.text.contains('Thread.currentThread().interrupt') ||
                         details.file.text.contains('Array.newInstance')) }

    includeEmptyDirs = false

    filter { line -> line
            .replaceAll('Thread.currentThread\\(\\)\\.interrupt\\(\\);', '')
            .replaceAll('Array.newInstance\\([^,]*, (.*?)\\)', 'new Object[\$1]')
    }
}

task gwtCompile(type: JavaExec) {
    dependsOn classes
    description = 'GWT verify'
    main = 'com.google.gwt.dev.Compiler'
    def cp = files(
            sourceSets.main.java.srcDirs, sourceSets.main.resources.srcDirs,
            sourceSets.gwt.java.srcDirs, sourceSets.gwt.resources.srcDirs,
            sourceSets.gwt.compileClasspath)
//    println("classpath (${cp.size()})\n${cp.join('\n')}")
    classpath cp
    args = ['-failOnError', '-validateOnly', 'rx.Rx']
}

task gwtCopy(type: Copy) {
    description = 'GWT Copy HEAD modified files to RxJava GWT'
    def out = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'diff-tree', '--no-commit-id', '--name-only', '-r', 'r1.3.0', 'HEAD'
        standardOutput = out
    }
    def modified = out.toString().split('\n').toList()
            .findAll({file -> file.startsWith('src/main/java')})
            .collect({file -> file.replace('src/main/java/','')})
    from('src/main/java') {
        include modified
    }
    into '../rxjava-gwt/src/main/modified/rx/super'
}

