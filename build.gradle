buildscript {
  repositories { jcenter() }
  dependencies { classpath 'com.netflix.nebula:gradle-rxjava-project-plugin:2.2.3' }
}

description = 'RxJava: Reactive Extensions for the JVM â€“ a library for composing asynchronous and event-based programs using observable sequences for the Java VM.'

apply plugin: 'rxjava-project'
apply plugin: 'java'

dependencies {
    testCompile 'junit:junit-dep:4.10'
    testCompile 'org.mockito:mockito-core:1.8.5'
}

javadoc {
    exclude "**/rx/internal/**"
}

// support for snapshot/final releases with the various branches RxJava uses
nebulaRelease {
    addReleaseBranchPattern(/\d+\.\d+\.\d+/)
    addReleaseBranchPattern('HEAD')
}

if (project.hasProperty('release.useLastTag')) {
    tasks.prepare.enabled = false
}

test{
     maxHeapSize = "2g"
}

// rm -rf ../rxjava-gwt/src/main/replaced && ./gradlew clean gwtResources && mv build/replaced ../rxjava-gwt/src/main
task gwtResources(type: Copy) {
    from 'src/main/java';
    into 'build/replaced/rx/super'

    include '**/*.java'
    exclude '**/schedulers/**' // GWT has only one custom scheduler
    exclude '**/RxThreadFactory.java' // uses Thread
    exclude '**/OperatorObserveOn.java' // uses unsafe and references ImmediateScheduler and TrampolineScheduler
    exclude '**/OnSubscribeCombineLatest.java' // uses BitSet
    exclude '**/Blocking*.java' // GWT unsupported
    exclude { details -> details.file.isFile() && !(
                         details.file.text.contains('FieldUpdater.newUpdater') ||
                         details.file.text.contains('Collections.synchronized') ||
                         details.file.text.contains('ArrayDeque') ||
                         details.file.text.contains('Thread.currentThread().interrupt') ||
                         details.file.text.contains('Array.newInstance')) }

    includeEmptyDirs = false

    filter { line -> line
            .replaceAll('AtomicIntegerFieldUpdater.newUpdater\\((.*?).class, \"(.*?)\"\\);',
                'new rx.internal.util.GwtIntegerFieldUpdater<\$1>() {' +
                ' @Override protected int getter(\$1 obj) { return obj.\$2; }' +
                ' @Override protected void setter(\$1 obj, int update) { obj.\$2 = update; } };')

            .replaceAll('AtomicLongFieldUpdater.newUpdater\\((.*?).class, \"(.*?)\"\\);',
                'new rx.internal.util.GwtLongFieldUpdater<\$1>() {' +
                ' @Override protected long getter(\$1 obj) { return obj.\$2; }' +
                ' @Override protected void setter(\$1 obj, long update) { obj.\$2 = update; } };')

            .replaceAll('AtomicReferenceFieldUpdater.newUpdater\\((.*?).class, (.*?).class, \"(.*?)\"\\);',
                'new rx.internal.util.GwtReferenceFieldUpdater<\$1,\$2>() {' +
                ' @Override protected \$2 getter(\$1 obj) { return obj.\$3; }' +
                ' @Override protected void setter(\$1 obj, \$2 update) { obj.\$3 = update; } };')

            .replaceAll('Collections.synchronized(.*?)\\((.*?)\\);', '\$2;')
            .replaceAll('ArrayDeque(.*?)\\((.*?)\\)', 'LinkedList\$1()')
            .replaceAll('ArrayDeque', 'LinkedList')
            .replaceAll('Thread.currentThread\\(\\)\\.interrupt\\(\\);', '')
            .replaceAll('Array.newInstance\\([^,]*, (.*?)\\)', 'new Object[\$1]')
    }
}
